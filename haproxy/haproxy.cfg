global
    log 127.0.0.1 local0 debug

defaults
    log global
    mode http
    option httplog
    option dontlognull
    retries 3
    timeout connect 5000
    timeout client 50000
    timeout server 50000

# public frontend where users get connected to
frontend http-in
    bind ${HAPROXY_IP}:${HAPROXY_PUBLIC_PORT}
    log global
    default_backend bk_waf

# WAF farm where users' traffic is routed first
backend bk_waf
    option httpchk HEAD /
    option http-server-close
    option forwardfor header X-Client-IP
    server nginx ${NGINX_IP}:${NGINX_EXPOSED_PORT} check

# Traffic secured by the WAF arrives here
frontend http-waf
    bind ${HAPROXY_PRIVATE_IP}:${HAPROXY_PRIVATE_PORT} name http
    mode http
    log global
    option httplog
    timeout client 25s
    maxconn 1000
    # route health check requests to a specific backend to avoid graph pollution in ALOHA GUI
    use_backend bk_waf_health_check if { path /waf_health_check }
    default_backend bk_web

# application server farm
backend bk_web
    balance roundrobin
    mode http
    log global
    cookie SERVERID insert indirect nocache
    default-server inter 3s rise 2 fall 3
    option httpchk HEAD /
    # get connected on the application server using the user ip
    # provided in the X-Client-IP header setup by http-waf frontend
    source 0.0.0.0 usesrc hdr_ip(X-Client-IP)
    timeout server 25s
    server server1 192.168.10.11:80 maxconn 100 weight 10 cookie server1 check

# backend dedicated to WAF checking (to avoid graph pollution)
backend bk_waf_health_check
    balance roundrobin
    mode http
    log global
    option forwardfor
    default-server inter 3s rise 2 fall 3
    timeout server 25s
    server server1 192.168.10.11:80 maxconn 100 weight 10 check
    server server2 192.168.10.12:80 maxconn 100 weight 10 check